import packages.pymolecule.pymolecule as pymolecule
import sys
import numpy
import convexhull
import helper
from scipy import spatial
import multiprocess

reso_for_pocket_detection = 4.0 # this is the distance between the points
reso_for_pocket_elucidation = 1.0 # probably needs to divide reso_for_pocket_detection evenly
min_dist_cutoff = 3.0 # any points close to the molecule than this will be removed
#max_dist_cutoff = 10.0 # any points farther from the molecule than this will be removed
num_processors = 24 # this is the number of processors to use to perform the calculation

# Step 1: load in the protein
print "Loading protein..."
molecule = pymolecule.Molecule()
#molecule.load_pdb_into('1XDN.protein.pdb',False,False,False)
molecule.load_pdb_into('2HU4.pdb',False,False,False)

# get rid of hydogen atoms here.
sel = molecule.selections.select_atoms({'element_stripped':'H'})
sel = molecule.selections.invert_selection(sel)
molecule = molecule.selections.get_molecule_from_selection(sel)

# Step 2: get a version with just the alpha carbons. In my experience, that's better for convex hull identification. Otherwise the program identifies shallow contors in the protein surface and pockets.
molecule_alpha_carbons = molecule.selections.get_molecule_from_selection(molecule.selections.select_atoms({'name_stripped':'CA'}))

# Step 3: calculate the convex hull of the protein
print "Calculating convex hull of protein..."
convex_hull_3d = convexhull.ConvexHull(molecule_alpha_carbons.get_coordinates())

# Step 4. get a box of equispaced points around the protein, snapped to reso
print "Making a box of points that entirely encompasses the protein..."
class box_of_points():
    def __init__(self, box, reso):
        self.reso = reso
        self.box = box

        min_x = self.__snap_float(box[0][0], reso)
        min_y = self.__snap_float(box[0][1], reso)
        min_z = self.__snap_float(box[0][2], reso)
        max_x = self.__snap_float(box[1][0], reso) + 1.1 * reso
        max_y = self.__snap_float(box[1][1], reso) + 1.1 * reso
        max_z = self.__snap_float(box[1][2], reso) + 1.1 * reso
        
        #xs = numpy.arange(min_x, max_x + 0.1, reso)
        #ys = numpy.arange(min_y, max_y + 0.1, reso)
        #zs = numpy.arange(min_z, max_z + 0.1, reso)
        
        x, y, z = numpy.mgrid[min_x:max_x:reso, min_y:max_y:reso, min_z:max_z:reso]
        self.points = numpy.array(zip(x.ravel(), y.ravel(), z.ravel()))
        
    def __snap_float(self, val, reso):
        return numpy.floor(val / reso) * reso
    
    def remove_points_outside_convex_hull(self, hull):
        chunks = [(hull, t) for t in numpy.array_split(self.points, num_processors)]
        tmp = multiprocess.multi_threading(chunks, num_processors, self.__multi_id_hull_pts)
        self.points = numpy.vstack(tmp.results)

    class __multi_id_hull_pts(multiprocess.general_task):
        def value_func(self, items, results_queue): # so overwriting this function
            hull = items[0]
            some_points = items[1]
            
            # Note this would be much faster if it were matrix-based intead of point-by-point based.
            new_pts = [] # Can preallocate numpy array size because I don't know beforehand how many points will be in the hull
            for pt in some_points: 
                if hull.inside_hull(pt) == True: new_pts.append(pt)
                
            if len(new_pts) == 0: pass # here save the results for later compilation
            else: self.results.append(numpy.array(new_pts))

    def remove_all_points_close_to_other_points(self, other_points, dist_cutoff):
        box_of_pts_distance_tree = spatial.KDTree(self.points) # note, in newer versions of scipy use cKDTree
        chunks = [(box_of_pts_distance_tree, dist_cutoff, t) for t in numpy.array_split(other_points, num_processors)]
        tmp = multiprocess.multi_threading(chunks, num_processors, self.__multi_get_close_points)
        indicies_of_box_pts_close_to_molecule_points = numpy.unique(numpy.hstack(tmp.results))
        
        self.points = numpy.delete(self.points, indicies_of_box_pts_close_to_molecule_points, axis=0) # remove the ones that are too close to molecule atoms

    class __multi_get_close_points(multiprocess.general_task):
        def value_func(self, items, results_queue): # so overwriting this function
            box_of_pts_distance_tree = items[0]
            dist_cutoff = items[1]
            other_points = items[2]
            
            other_points_distance_tree = spatial.KDTree(other_points) # note, in newer versions of scipy use cKDTree
            sparce_distance_matrix = other_points_distance_tree.sparse_distance_matrix(box_of_pts_distance_tree, dist_cutoff)
            indicies_of_box_pts_close_to_molecule_points = numpy.unique(sparce_distance_matrix.tocsr().indices) #tocsr()
            
            self.results.append(indicies_of_box_pts_close_to_molecule_points)
            
    def remove_all_points_far_from_other_points(self, other_points, dist_cutoff):
        box_of_pts_distance_tree = spatial.KDTree(self.points) # note, in newer versions of scipy use cKDTree
        chunks = [(box_of_pts_distance_tree, dist_cutoff, t) for t in numpy.array_split(other_points, num_processors)]
        tmp = multiprocess.multi_threading(chunks, num_processors, self.__multi_get_close_points)
        indicies_of_box_pts_close_to_molecule_points = numpy.unique(numpy.hstack(tmp.results))
        
        self.points = self.points[indicies_of_box_pts_close_to_molecule_points] # remove the ones that are too far from molecule atoms

    def to_pdb(self, let="X"):
        print helper.numpy_to_pdb(self.points, let)
        
    def expand_around_existing_points(self, num_pts, reso): # this needs to be parallel
        new_pts = []
        
        i = numpy.arange(-num_pts * reso, num_pts * reso + reso*0.01, reso)
        for xi in i:
            for yi in i:
                for zi in i:
                    vec = numpy.array([xi, yi, zi])
                    new_pts.append(self.points + vec)
        self.points = numpy.vstack(new_pts)
        
        self.__unique_points()
        
    def __unique_points(self):
        """Identifies unique points (rows) in an array of points.
        
        Arguments:
        a -- A nx3 numpy.array representing 3D points.
        
        Returns:
        A nx2 numpy.array containing the 3D points that are unique.
        
        """
        
        b = numpy.ascontiguousarray(self.points).view(numpy.dtype((numpy.void, self.points.dtype.itemsize * self.points.shape[1])))
        unique_points = numpy.unique(b).view(self.points.dtype).reshape(-1, self.points.shape[1])
        
        self.points = unique_points
        
    def some_sort_of_pass_filter_until_no_change(self, reso, min_allowable_num_neighbors):
        # calculate the pairwise distances between all box points
        box_of_pts_distance_tree = spatial.KDTree(self.points) # note, in newer versions of scipy use cKDTree
        dist_matrix = box_of_pts_distance_tree.sparse_distance_matrix(box_of_pts_distance_tree, reso * numpy.sqrt(3.0) * 1.1).todense() # so kiddy-corner counted as a neighbor
        
        chains = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
        t = 0
        
        num_pts = 0
        while num_pts != len(self.points): # keep running the pass until there are no changes (points are stable)
            
            num_pts = len(self.points)
            
            # identify the points that have enough neighbors
            columns_nonzero_count = numpy.array((dist_matrix != 0).sum(0))[0]
            columns_nonzero_count_match_criteria = (columns_nonzero_count >= min_allowable_num_neighbors)
            columns_nonzero_count_match_criteria_index = numpy.nonzero(columns_nonzero_count_match_criteria)
            
            # keep only those points
            self.points = self.points[columns_nonzero_count_match_criteria_index]
            
            print helper.numpy_to_pdb(self.points, chains[t])
            t = t + 1
            
            # update the distance matrix so it doesn't need to be recalculated
            dist_matrix = dist_matrix[columns_nonzero_count_match_criteria_index,:][0]
            dist_matrix = dist_matrix.T
            dist_matrix = dist_matrix[columns_nonzero_count_match_criteria_index,:][0]
            dist_matrix = dist_matrix.T

        
    def old_stuff(self):
        #### RATHER THAN RECALCULATING DISTANCES, JUST RESHAPE THE EXISTING DISTANCE MATRIX!!!!
        #### WILL BE MUCH FASTER!!!!
        
        box_of_pts_distance_tree = spatial.KDTree(self.points) # note, in newer versions of scipy use cKDTree
        dist_matrix = box_of_pts_distance_tree.sparse_distance_matrix(box_of_pts_distance_tree, reso * numpy.sqrt(3.0) * 1.1).todense() # so kiddy-corner counted as a neighbor

        data = [(i, min_allowable_num_neighbors, dist_matrix[i]) for i in range(len(dist_matrix))]
        #chunks = numpy.array_split(data, num_processors)
        #chunks = [data[i::num_processors] for i in xrange(num_processors)]

        tmp = multiprocess.multi_threading(data, num_processors, self.__multi_pass_filter)
        try: index_to_keep = numpy.hstack(tmp.results)
        except:
            print "An error has occurred. It's likely that you've specified too high a min_neighbors value."
            sys.exit(0)

        self.points = self.points[index_to_keep]

    class __multi_pass_filter(multiprocess.general_task):
        def value_func(self, items, results_queue): # so overwriting this function
            index = items[0]
            min_allowable_num_neighbors = items[1]
            matrix_line = items[2]
            
            num_neighbors = numpy.count_nonzero(matrix_line) # surprizingly, this doesn't have an axis parameter, which is why I'm using the multi-processor approach.
            if num_neighbors >= min_allowable_num_neighbors: self.results.append(index)

box_pts = box_of_points(molecule.get_bounding_box(), reso_for_pocket_detection * 4) # note that the initial box is low resolution (* 4) so convex hull will be very fast

# Step 6. remove points outside the convex hull
print "Removing the points in that box that are outside the protein's convex hull..."
box_pts.remove_points_outside_convex_hull(convex_hull_3d)
box_pts.expand_around_existing_points(2, reso_for_pocket_detection * 2)
box_pts.remove_points_outside_convex_hull(convex_hull_3d)
box_pts.expand_around_existing_points(2, reso_for_pocket_detection)
box_pts.remove_points_outside_convex_hull(convex_hull_3d)

# Step 5. remove the points in this box that are too close to protein atoms.
# For simplicity's sake, don't worry about atomic radii. Just a simple cutoff.
print "Removing the box points that are too close to the protein..."
box_pts.remove_all_points_close_to_other_points(molecule.get_coordinates(), min_dist_cutoff)

# Step 5. remove the points in this box that are too far away from protein atoms.
# For simplicity's sake, don't worry about atomic radii. Just a simple cutoff.
print "Removing the box points that are too close to the protein..."
#box_pts.remove_all_points_far_from_other_points(molecule.get_coordinates(), max_dist_cutoff)

# Step X. now surround each of these points with higher resolution points that match the same criteria.
if reso_for_pocket_elucidation != reso_for_pocket_detection:
    print "Filling out finer points..."
    print "\tAdding points..."
    box_pts.expand_around_existing_points(reso_for_pocket_detection/reso_for_pocket_elucidation, reso_for_pocket_elucidation)
    print "\tRemoving finer points outside convex hull..."
    box_pts.remove_points_outside_convex_hull(convex_hull_3d)
    print "\tRemoving finer points too close to molecule atoms..."
    box_pts.remove_all_points_close_to_other_points(molecule.get_coordinates(), min_dist_cutoff)
    print "\tRemoving finer points too far from molecule atoms..."
    #box_pts.remove_all_points_far_from_other_points(molecule.get_coordinates(), max_dist_cutoff)

# Step X. Now start doing a repeated pass filter. Don't know if it's high pass or low pass. I've heard these terms, though, and they sound cool.
box_pts.some_sort_of_pass_filter_until_no_change(reso_for_pocket_elucidation, 4)

#box_pts.to_pdb()


